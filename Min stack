import java.util.* ;
import java.io.*; 

public class Solution {

    static class MinStack {

        private Stack<Integer> mainstack;
        private Stack<Integer> minstack; 

        // Constructor
        MinStack() {
            // Write your code here.
            mainstack = new Stack<>();
            minstack = new Stack<>();

        }

        // Function to add another element equal to num at the top of stack.
        void push(int num) {
            // Write your code here.
            
            mainstack.push(num);

            if(minstack.isEmpty() || num <= minstack.peek())
            {
                minstack.push(num);
            }
        }

        // Function to remove the top element of the stack.
        int pop() {
            // Write your code here.
            int x = 0;
            if(mainstack.isEmpty())
            {
                return -1;
            }
            else
            {
                x = mainstack.peek();
                mainstack.pop();
               if(x == minstack.peek())
               {
                   minstack.pop();
               }
            }
            return x;

        }

        // Function to return the top element of stack if it is present. Otherwise
        // return -1.
        int top() {
            // Write your code here.
            int y=0;
            if(!mainstack.isEmpty())
            {
                y = mainstack.peek();
                return y;
            }
            else
                return -1;

        }

        // Function to return minimum element of stack if it is present. Otherwise
        // return -1.
        int getMin() {
            // Write your code here.
            if(!minstack.isEmpty())
            {
                return minstack.peek();
            }
            else
                return -1;

        }
    }
}
