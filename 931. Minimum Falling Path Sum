class Solution {
    public int minFallingPathSum(int[][] matrix) {
         int n = matrix.length;

        // Iterate from the second row to the last row
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // Calculate the minimum falling path sum for the current element
                matrix[i][j] += Math.min(matrix[i - 1][j], Math.min(matrix[i - 1][Math.max(0, j - 1)], matrix[i - 1][Math.min(n - 1, j + 1)]));
            }
        }

        // Find the minimum value in the last row, which represents the minimum falling path sum
        int minPathSum = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            minPathSum = Math.min(minPathSum, matrix[n - 1][j]);
        }

        return minPathSum;
    }
}
