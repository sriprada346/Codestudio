// Q2 Given two sorted linked lists consisting of N and M nodes respectively. The task is to merge both of the lists (in place) and return the head of the merged list.
//       Examples:
// Input: a: 5->10->15, b: 2->3->20
// Output: 2->3->5->10->15->20 
// Input: a: 1->1, b: 2->4
// Output: 1->1->2->4

import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;

    ListNode(int x){
        val = x;
        next = null;
    }
}
public class task01_02 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the M nodes");
        int m = sc.nextInt();
        System.out.println("Enter the elements of the first sorted list");
        ListNode a = createList(m, sc);

        System.out.println("Enter the N nodes");
        int n = sc.nextInt();
        System.out.println("Enter the elements of the second sorted list");
        ListNode b = createList(n, sc);

        ListNode mergedHead = mergeTwoLists(a, b);

        while (mergedHead != null) {
            System.out.print(mergedHead.val + "-> ");
            mergedHead = mergedHead.next;
        }
        System.out.println();
        
        sc.close();
    }


    public static ListNode createList(int size, Scanner sc) {
        if (size == 0) return null;

        ListNode head = new ListNode(sc.nextInt());
        ListNode current = head;

        for (int i = 1; i < size; i++) {
            current.next = new ListNode(sc.nextInt());
            current = current.next;
        }

        return head;
    }

    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null){
        return l2;
        }
        if(l2 == null)
        {
            return l1;
        }

        if(l1.val <= l2.val)
        {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        else
        {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}
